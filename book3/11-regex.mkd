Regular expressions
===================

Até agora, estivemos lendo arquivos, procurando padrões e
extraindo vários bits de linhas que achamos interessantes. Nós estivemos métodos de strings como `split` e `find`, além de particionar listas e strings para extrair porções das linhas 

\index{expressões regulares}
\index{regex}
\index{re module}

Essa tarefa de pesquisar e extrair é tão comum que o Python tem uma biblioteca muito poderosa chamada *expressões regulares* que lida com muitas dessas tarefas com bastante elegância. A razão pela qual não as introduzimos no início do livro é porque, embora sejam muito poderosas, são um pouco complicadas, além de sua sintaxe levar algum tempo para ser compreendida.

Expressões regulares são quase sua própria linguagem de programação para pesquisar e analisar seqüências de caracteres. De fato, livros inteiros foram escritos sobre este tópico. Neste capítulo, abordaremos apenas o básico dele. Para mais detalhes sobre consulte:

<https://en.wikipedia.org/wiki/Regular_expression>

<https://docs.python.org/library/re.html>

A biblioteca de expressões regulares `re` deve ser importada para seu programa antes de poder usá-la. O uso mais simples da biblioteca de expressões regulares é a função `search ()`. O programa a seguir demonstra um uso trivial desta função.

\index{regex!pesquisa}

\VerbatimInput{../code3/re01.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Abrimos o arquivo, percorremos cada linha e usamos a expressão regular `search ()` para imprimir apenas linhas que contenham a string "From:". Este programa não usa o poder real das expressões regulares, pois poderíamos ter usado com a mesma facilidade o `line.find()` para obter o mesmo resultado.

\index{string!find}

O poder das expressões regulares ocorre quando adicionamos caracteres especiais à string de pesquisa, isso nos permite controlar com mais precisão quais linhas correspondem à string. A adição desses caracteres especiais à nossa expressão regular nos permite fazer correspondências e extrações sofisticadas enquanto escrevemos menos linhas de código.
Por exemplo, o caractere de sinal de intercalação é usado em expressões regulares para corresponder ao "início" de uma linha. Poderíamos alterar nosso programa para encontrar apenas as linhas em que "From:" estava no início da linha, da seguinte maneira:

\VerbatimInput{../code3/re02.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Agora, apenas corresponderemos às linhas que *começam com* a sequência "From:". Este ainda é um exemplo muito simples que poderíamos ter feito de forma equivalente ao método `beginwith()` da biblioteca de strings. Mas serve para introduzir a noção de que expressões regulares contêm caracteres de ação especial que nos dão mais controle sobre o que corresponderá à expressão regular.

\index{string!começam com}

Correspondência de caracteres em expressões regulares
-----------------------------------------

Existem vários caracteres especiais que nos permitem construir expressões regulares ainda
mais poderosas. O caractere especial mais comumente
usado é o ponto final, que combina com qualquer caractere.

\index{curinga}
\index{regex!curinga}

No exemplo seguinte, a expressão regular `F..m:` se encaixaria com
qualquer uma das strings "From:", "Fxxm:", "F12m:", ou "F!@m:" já que os caracteres
de ponto final na expressão regular combinam com qualquer outro caractere.

\VerbatimInput{../code3/re03.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Isso é particularmente poderoso quando combinado com a habilidade
de indicar que um caractere pode ser repetido inúmeras vezes usando os caracteres `*` ou
`+` na sua expressão regular. Esses caracteres especiais significam
que, em vez de corresponder a um único caractere na string de pesquisa, eles
correspondem à zero ou mais caracteres (no caso do asterisco) ou
um ou mais caracteres (no caso do sinal de mais).

Podemos restringir ainda mais as linhas que combinamos usando um caractere 
*curinga* repetido no seguinte exemplo:

\VerbatimInput{../code3/re04.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

A string de pesquisa `^From:.+@` irá combinar com sucesso linhas que comece
com "From:", seguido de um ou mais caracteres (`.+`), seguido por um
sinal de arroba. Então irá corresponder a seguinte linha:

~~~~
From: stephen.marquard@uct.ac.za
~~~~

Você pode pensar no curinga `.+` como expansível para corresponder a todos
os caracteres entre o caractere de dois pontos e o símbolo de arroba.

~~~~
From:.+@
~~~~

É bom pensar nos sinais de mais e asterisco como “agressivos”. Por
exemplo, a string a seguir corresponderia o ultimo sinal de arroba na string
conforme o `.+` é empurrado para fora, como mostrado abaixo:

~~~~
From: stephen.marquard@uct.ac.za, csev@umich.edu, and cwen @iupui.edu
~~~~

É possível dizer que um asterisco ou sinal de mais não sejam tão “gananciosos” adicionando outro caractere. Veja a documentação detalhada para obter informações sobre como desativar o comportamento ganancioso.

\index{ganancioso}

Extraindo dados usando expressões regulares
-----------------------------------------

Se quisermos extrair dados de uma string em Python podemos usar o método findall() para extrair todas as substrings que correspondem à expressão regular. Vamos usar o exemplo de querer extrair qualquer frase que pareça um endereço de email de qualquer linha independente do formato. Por exemplo, queremos extrair os endereços de email de cada linha a seguir:

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
Return-Path: <postmaster@collab.sakaiproject.org>
          for <source@collab.sakaiproject.org>;
Received: (from apache@localhost)
Author: stephen.marquard@uct.ac.za
~~~~

Nós não queremos escrever código para cada um dos tipos de linha, dividindo 
e fatiando de forma diferente cada linha. O seguinte programa usa
`findall()` para achar as linhas que contenham endereços de email
e extrair um ou mais endereços de cada uma dessas linhas.

\index{findall}
\index{regex!findall}

\VerbatimInput{../code3/re05.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

O método  `findall()` procura a string no segundo
argumento e retorna uma lista de todas as strings que pareçam endereços 
de email. Estamos usando uma sequência de dois caracteres que correspondem
a um caractere sem espaço em branco (`\S`).

A saída do programa seria:

~~~~
['csev@umich.edu', 'cwen@iupui.edu']
~~~~

Traduzindo a expressão regular, estamos procurando substrings que
tenham pelo menos um caractere que não seja espaço em branco, seguido por um arroba,
seguido por pelo menos mais um caractere que não seja espaço em branco. O
`\S+` combina o maior número possível de caracteres que não são espaços em branco.

A expressão regular corresponderia duas vezes (csev@umich.edu and
cwen@iupui.edu), mas não corresponderia a string “@2PM” pois não
há caracteres não em branco *antes* do arroba. Podemos
Podemos usar essa expressão regular em um programa para ler todas as linhas em um arquivo
e exibir qualquer coisa que pareça com um endereço de email da seguinte forma:

\VerbatimInput{../code3/re06.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Lemos cada linha e então extraimos todas as substrings que correspondem nossa
expressão regular. Já que `findall()` retorna uma lista, podemos
simplesmente checar se o número de elementos na nossa lista retornada é maior 
que zero para imprimir apenas linhas onde encontramos pelo menos uma substring que
pareça com um endereço de email.

Se executarmos o programa em *mbox.txt* teremos a seguinte
saída:

~~~~
['wagnermr@iupui.edu']
['cwen@iupui.edu']
['<postmaster@collab.sakaiproject.org>']
['<200801032122.m03LMFo4005148@nakamura.uits.iupui.edu>']
['<source@collab.sakaiproject.org>;']
['<source@collab.sakaiproject.org>;']
['<source@collab.sakaiproject.org>;']
['apache@localhost)']
['source@collab.sakaiproject.org;']
~~~~

Alguns de nossos endereços de emails tem caracteres incorretos como "<" ou ";"
no início ou no final. Vamos declarar que estamos interessados apenas na
parte da string que começa e termina com uma letra ou um
número.

Para fazer isso, usamos outro recurso de expressão regular. Colchetes
são usados para indicar um conjunto de múltiplos caracteres aceitáveis que
estamos dispostos a considerar correspondente. De certo modo, o `\S` está
pedindo para combinar o conjunto de “caracteres que não são espaços em branco”. Agora seremos 
um pouco mais explícitos em termos dos caracteres que iremos combinar.

Aqui está nossa nova expressão regular:

~~~~
[a-zA-Z0-9]\S*@\S*[a-zA-Z]
~~~~

Isto está começando a ficar um pouco complicado e você pode começar a ver porque
expressões regulares são uma pequena linguagem própria.
Traduzindo essa expressão regular, estamos procurando por substrings que
iniciem com uma *única* letra minúscula, letra maiúscula,
ou número "[a-zA-Z0-9]", seguido por zero ou mais caracteres não em branco
(`\S*`), seguido por um arroba, seguido por zero ou mais 
não em branco (`\S*`), seguido por uma letra minúscula ou
maiúscular. Note que trocamos de  `+` para `*` para indicar 
zero ou mais caracteres não em branco desde que `[a-zA-Z0-9]` já é um
caractere não em branco. Lembre-se que o `*` ou `+` se aplica ao caractere único
imediatamente a esquerda do sinal de mais ou do asterisco.

\index{regex!conjunto caractere(colchetes)}

Se usarmos essa expressão em nosso programa, nosso dado é muito mais limpo:

\VerbatimInput{../code3/re07.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

~~~~
...
['wagnermr@iupui.edu']
['cwen@iupui.edu']
['postmaster@collab.sakaiproject.org']
['200801032122.m03LMFo4005148@nakamura.uits.iupui.edu']
['source@collab.sakaiproject.org']
['source@collab.sakaiproject.org']
['source@collab.sakaiproject.org']
['apache@localhost']
~~~~

Perceba que nas linhas `source@collab.sakaiproject.org`,nossa expressão 
regular eliminou duas letras no final da string (">;").
Isso acontece porque quando acrescentamos `[a-zA-Z]` ao final da nossa expressão
regular, estamos exigindo que qualquer string que o analisador de expressões
regulares encontre deve terminar com uma letra. Então quando se vê  ">" no final de 
"sakaiproject.org>;" ele simplesmente para na ultima letra “correpondente” 
encontrada (i.e., o “g” foi a ultima correspondencia).

Veja também que a saída do programa é uma lista de Python que contém uma
string como unico elemento na lista.

Combining searching and extracting
----------------------------------

If we want to find numbers on lines that start with the string "X-" such
as:

~~~~
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000
~~~~

we don't just want any floating-point numbers from any lines. We only
want to extract numbers from lines that have the above syntax.

We can construct the following regular expression to select the lines:

~~~~
^X-.*: [0-9.]+
~~~~

Translating this, we are saying, we want lines that start with `X-`,
followed by zero or more characters (`.*`), followed by a colon (`:`)
and then a space. After the space we are looking for one or more
characters that are either a digit (0-9) or a period `[0-9.]+`. Note
that inside the square brackets, the period matches an actual period
(i.e., it is not a wildcard between the square brackets).

This is a very tight expression that will pretty much match only the
lines we are interested in as follows:

\VerbatimInput{../code3/re10.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

When we run the program, we see the data nicely filtered to show only
the lines we are looking for.

~~~~
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000
X-DSPAM-Confidence: 0.6178
X-DSPAM-Probability: 0.0000
~~~~

But now we have to solve the problem of extracting the numbers. While it
would be simple enough to use `split`, we can use another
feature of regular expressions to both search and parse the line at the
same time.

\index{string!split}

Parentheses are another special character in regular expressions. When
you add parentheses to a regular expression, they are ignored when
matching the string. But when you are using `findall()`,
parentheses indicate that while you want the whole expression to match,
you only are interested in extracting a portion of the substring that
matches the regular expression.

\index{regex!parentheses}
\index{parentheses!regular expression}

So we make the following change to our program:

\VerbatimInput{../code3/re11.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Instead of calling `search()`, we add parentheses around the
part of the regular expression that represents the floating-point number
to indicate we only want `findall()` to give us back the
floating-point number portion of the matching string.

The output from this program is as follows:

~~~~
['0.8475']
['0.0000']
['0.6178']
['0.0000']
['0.6961']
['0.0000']
..
~~~~

The numbers are still in a list and need to be converted from strings to
floating point, but we have used the power of regular expressions to
both search and extract the information we found interesting.

As another example of this technique, if you look at the file there are
a number of lines of the form:

~~~~
Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772
~~~~

If we wanted to extract all of the revision numbers (the integer number
at the end of these lines) using the same technique as above, we could
write the following program:

\VerbatimInput{../code3/re12.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Translating our regular expression, we are looking for lines that start
with `Details:`, followed by any number of characters (`.*`), followed
by `rev=`, and then by one or more digits. We want to find lines that
match the entire expression but we only want to extract the integer
number at the end of the line, so we surround `[0-9]+` with parentheses.

When we run the program, we get the following output:

~~~~
['39772']
['39771']
['39770']
['39769']
...
~~~~

Remember that the `[0-9]+` is "greedy" and it tries to make as large a
string of digits as possible before extracting those digits. This
"greedy" behavior is why we get all five digits for each number. The
regular expression library expands in both directions until it
encounters a non-digit, or the beginning or the end of a line.

Now we can use regular expressions to redo an exercise from earlier in
the book where we were interested in the time of day of each mail
message. We looked for lines of the form:

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
~~~~

and wanted to extract the hour of the day for each line. Previously we
did this with two calls to `split`. First the line was split
into words and then we pulled out the fifth word and split it again on
the colon character to pull out the two characters we were interested
in.

While this worked, it actually results in pretty brittle code that is
assuming the lines are nicely formatted. If you were to add enough error
checking (or a big try/except block) to insure that your program never
failed when presented with incorrectly formatted lines, the code would
balloon to 10-15 lines of code that was pretty hard to read.

We can do this in a far simpler way with the following regular
expression:

~~~~
^From .* [0-9][0-9]:
~~~~

The translation of this regular expression is that we are looking for
lines that start with `From ` (note the space), followed by any number
of characters (`.*`), followed by a space, followed by two digits
`[0-9][0-9]`, followed by a colon character. This is the definition of
the kinds of lines we are looking for.

In order to pull out only the hour using `findall()`, we add
parentheses around the two digits as follows:

~~~~
^From .* ([0-9][0-9]):
~~~~

Isso resulta no seguinte programa:

\VerbatimInput{../code3/re13.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Quando o programa é executado, ele produz a seguinte saída:

~~~~
['09']
['18']
['16']
['15']
...
~~~~

Caractere de Escape
----------------

Como usamos caracteres especiais em expressões regulares para corresponder ao início ou ao final de uma linha ou para especificar curingas, precisamos indicar como esses caracteres são "normais" e queremos corresponder ao caractere atual, como um cifrão.

Podemos indicar que queremos simplesmente combinar um caractere prefixando com uma barra invertida. Por exemplo, podemos encontrar montantes de dinheiro com a seguinte expressão regular

~~~~ {.python}
import re
x = 'Acabamos de receber R$ 10,00 por cookies.'
y = re.findall('\$[0-9.]+',x)
~~~~

Como prefixamos o cifrão com uma barra invertida, ele realmente corresponde ao cifrão na string de entrada, em vez de corresponder ao "fim da linha", e o restante da expressão regular corresponde a um ou mais dígitos ou ao caractere do período. Nota: Entre colchetes, os caracteres não são "especiais". Então, quando dizemos [0-9], isso realmente significa dígitos ou um período. Fora dos colchetes, um período é o caractere curinga e corresponde a qualquer caractere. Dentro de colchetes, o período é  de fato um período.

Sumário
-------

Enquanto isso apenas arranhou a superfície das expressões regulares, aprendemos um pouco sobre a linguagem das expressões regulares. Eles são sequências de busca com caracteres especiais que comunicam seus desejos ao sistema de expressões regulares quanto ao que define “correspondência” e o que é extraído das sequências combinadas. Aqui estão alguns desses caracteres especiais e sequências de caracteres:

`^` Corresponde ao começo da linha

`$` Corresponde ao final da linha.

`.` Corresponde a qualquer caractere (um curinga).

`\s` Corresponde a um caractere de espaço em branco.

`\S` Corresponde a um caractere sem espaço em branco (oposto de \\ s).

`*` Aplica-se ao (s) caractere (s) imediatamente anterior (es) e indica para corresponder a zero ou mais vezes.

`*?` Aplica-se ao (s) caractere (s) imediatamente anterior (es) e indica
coincidir com zero ou mais vezes no "modo não-ganancioso".

`+` Aplica-se ao caractere imediatamente anterior e indica a correspondência de uma ou mais vezes.

`+?` Aplica-se ao (s) caractere (s) imediatamente anterior (es) e indica a correspondência de uma ou mais vezes no "modo não-ganancioso".

`?` Aplica-se ao (s) caractere (s) imediatamente anterior (es) e indica para corresponder a zero ou uma vez.

`??` Aplica-se ao (s) caractere (s) imediatamente anterior (es) e indica
coincidir com zero ou uma vez no "modo não-ganancioso".

`[aeiou]` Corresponde a um único caractere, desde que esse caractere esteja no conjunto especificado. Neste exemplo, ele corresponderia a "a", "e", "i", "o" ou "u", mas nenhum outro caractere.

`[a-z0-9]` Você pode especificar intervalos de caracteres usando o sinal de menos. Este exemplo é um único caractere que deve ser uma letra minúscula ou um dígito.

`[^A-Za-z]` Quando o primeiro caractere na notação de conjunto é um acento circunflexo, ele inverte a lógica. Este exemplo corresponde a um único caractere que é qualquer coisa * diferente de * uma letra maiúscula ou minúscula.

`( )` Quando parênteses são adicionados a uma expressão regular, eles são ignorados com a finalidade de correspondência, mas permitem que você extraia um subconjunto específico da string correspondida, em vez da string inteira ao usar `findall ()`.

`\b` Corresponde à string vazia, mas apenas no início ou no final de uma palavra.

`\B` Corresponde à string vazia, mas não no início ou no final de uma palavra.

`\d` Corresponde a qualquer dígito decimal; equivalente ao conjunto [0-9].

`\D` Corresponde a qualquer caractere não dígito; equivalente ao conjunto [^ 0-9].

Seção bônus para usuários de Unix/Linux
------------------------------------

O suporte à pesquisa de arquivos usando expressões regulares foi introduzido ao sistema operacional Unix desde a década de 1960 ao qual está disponível em quase todas as linguagens de programação de uma forma ou de outra.

\index{grep}

De fato, existe uma linha de comando dentro do Unix chamada de *grep* (Analisador Generalizado de Expressões Regulares) que faz, basicamente, a mesma coisa que os exemplos `search()` expostos neste capítulo. Então, se você tem um sistema Macintosh ou Linux, você pode tentar usar os seguintes comandos em sua janela de linha de comando.

~~~~ {.bash}
$ grep '^From:' mbox-short.txt
From: stephen.marquard@uct.ac.za
From: louis@media.berkeley.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
~~~~

Isso diz ao `grep` para mostrar as linhas que começam com a string "From:" que estão no arquivo *mbox-short.txt*. Se você experimentar um pouco o comando `grep` e ler a documentação do mesmo, você irá encontrar algumas sutis diferenças entre o suporte a expressão regular utilizada em Python e o suporte à expressão regular no `grep`. Por exemplo, `grep` não suporta um caracter não vazio `\S`, então você irá precisar utilizar uma maneira ligeiramente mais complexa para representa-lo: `[^ ]`, que indica um caracter que é qualquer coisa menos um espaço em branco.

Depuração
---------

Python tem algumas simples e rudimentares documentações embutidas que podem ser bastante úteis se você precisar de uma rápida consulta para refrescar sua memória sobre o nome exato de um método específico. Essa documentação pode ser vista no interpretador do Python no modo interativo.

Você pode chamar um sistema interativo de ajuda usando `help()`.

~~~~ {.python}
>>> help()

help> modules
~~~~

Se você sabe qual módulo você quer usar, você pode usar o comando `dir()` para encontrar os métodos no módulo, como mostra a seguir:

~~~~ {.python .trinket}
>>> import re
>>> dir(re)
[.. 'compile', 'copy_reg', 'error', 'escape', 'findall',
'finditer', 'match', 'purge', 'search', 'split', 'sre_compile',
'sre_parse', 'sub', 'subn', 'sys', 'template']
~~~~

Você também pode pegar uma pequena quantidade de documentação sobre um determinado método usando o comando `dir`.

~~~~ {.python .trinket}
>>> help (re.search)
Help on function search in module re:

search(pattern, string, flags=0)
    Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found.
>>>
~~~~
A documentação embutida não é muito extensa, mas pode ser bastante útil quando você estiver com pressa ou quando você não têm acesso a algum navegador Web no momento ou a qualquer outro mecanismo de pesquisa. 

Glossário
--------

código frágil
:  Código executado quando os dados de entrada estão em um formato particular, mas são propensos a quebra, caso ocorra algum desvio em relação ao formato correto. Chamamos isto de “código frágil” pois é facilmente quebrado.

correspondência gananciosa
:   Noção de que os caracteres + e * em uma expressão regular expandem para o exterior, de forma a corresponder à maior string possível.
\index{greedy}
\index{greedy matching}

curinga
:   Caractere especial que corresponde a qualquer tipo de caractere. Em expressões regulares, o trunfo é o período.
\index{wild card}

expressão regular
:   A language for expressing more complex search strings. A regular
    expression may contain special characters that indicate that a
    search only matches at the beginning or end of a line or many other
    similar capabilities.
    
grep
:   Comando disponível na maioria dos sistemas Unix que executa uma busca entre arquivos de texto, procurando por linhas que correspondem à expressão regular. O nome do comando é ligado à expressão em inglês “Generalized Regular Expression Parser”, em português: “Analisador Generalizado de Expressões Regulares”.
\index{grep}

Exercícios
---------

**Exercício 1: Escreva um programa simples para simular a operação do comando `grep` em Unix. Peça ao usuário para entrar com uma expressão regular e conte o número de linhas que se igualam à expressão digitada:**

~~~~
$ python grep.py
Digite uma expressão regular: ^Autor
mbox.txt teve 1798 linhas que se igualam a ^Autor

$ python grep.py
Digite uma expressão regular: ^X-
mbox.txt teve 14368 linhas que se igualam a ^X-

$ python grep.py
Digite uma expressão regular: java$
mbox.txt teve 4175 linhas que se igualam a java$

~~~~

**Exercício 2: Escreva um programa que procure por uma linha na forma:**

~~~~
Nova Revisão: 39772
~~~~

**Extraia o número de cada linha usando uma expressão regular e o método `findall()`. Compute o valor médio dos números e mostre-o.**

~~~~
Arquivo de entrada: mbox.txt
38444.0323119

Arquivo de entrada: mbox-short.txt
39756.9259259
~~~~
